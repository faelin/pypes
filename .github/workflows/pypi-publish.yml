# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

name: Publish Python distribution to PyPI, TestPyPI, and Github release

on:
  push:
    branches: [ "release" ]
      
permissions:
  contents: read

jobs:
  update-tags:
    name: Tag release using pyproject.toml
    runs-on: ubuntu-20.04
    permissions:
      contents: write
      
    steps:
      - name: Checkout release
        uses: actions/checkout@v3
        with:
          ref: release
      - name: Determine new tag
        id: computed-tag
        run: |
          set -e
          TAG=$(cat pyproject.toml \
            | grep --extended-regexp "^version =" \
            | grep --extended-regexp --only-matching "[0-9]+\.[0-9]+.[0-9]+[-\.\+a-zA-Z0-9]*" \
            | head --lines=1)
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
      - name: Tag release
        uses: djordon/git-autotag-action@v0.7.0-beta1
        with:
          tag: ${{ steps.computed-tag.outputs.tag }}
  
      - name: "Update 'latest' tag"
        uses: EndBug/latest-tag@latest

  build:
    name: Build distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install pypa/build
        run: |
          python -m pip install --upgrade pip
          pip install build --user
      - name: Build a binary wheel and a source tarball
        run: python3 -m build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist/


  publish-to-pypi:
    name: Publish Python distribution to PyPI
    needs:
      - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/pypes
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}


  publish-to-testpypi:
    name: Publish Python distribution to TestPyPI
    needs:
      - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/pypes
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          user: __token__
          password: ${{ secrets.TESTPYPI_API_TOKEN }}


  github-release:
    name: >-
      Sign the Python distribution with Sigstore
      and upload them to GitHub Release
    needs:
      - build
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
      - uses: actions/checkout@v4
      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/
          
      - name: Determine intended version
        id: computed-tag
        run: |
          set -e
          TAG=$(cat pyproject.toml \
            | grep --extended-regexp "^version =" \
            | grep --extended-regexp --only-matching "[0-9]+\.[0-9]+.[0-9]+[-\.\+a-zA-Z0-9]*" \
            | head --lines=1)
          echo "v$TAG"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
  
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v2.1.1
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
            
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create '${{ steps.computed-tag.outputs.tag }}' --repo '${{ github.repository }}' --notes ""
          
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `dist/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: >-
          gh release upload '${{ steps.computed-tag.outputs.tag }}' dist/** --repo '${{ github.repository }}'
